<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf51422_xxaa_s130.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf51422_xxaa_s130.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Sun Apr 10 16:59:35 2016
<BR><P>
<H3>Maximum Stack Usage =        584 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ble_evt_dispatch &rArr; pm_ble_evt_handler &rArr; gcm_ble_evt_handler &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">SVC_Handler</a><BR>
 <LI><a href="#[5]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">PendSV_Handler</a><BR>
 <LI><a href="#[6]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SysTick_Handler</a><BR>
 <LI><a href="#[d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[48]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a><BR>
 <LI><a href="#[ca]">cmd_queue_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ca]">cmd_queue_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[15]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[14]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[c]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[19]">LPCOMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[7]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[18]">QDEC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[8]">RADIO_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[13]">RNG_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[11]">RTC0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[a]">SPI0_TWI0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[b]">SPI1_TWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1a]">SWI0_IRQHandler</a> from app_timer.o(i.SWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1b]">SWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">SWI2_IRQHandler</a> from softdevice_handler.o(i.SWI2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI3_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1f]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[21]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[12]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[e]">TIMER0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[f]">TIMER1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[10]">TIMER2_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">UART0_IRQHandler</a> from nrf_drv_uart.o(i.UART0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">WDT_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[22]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[2d]">alert_timer_handler</a> from bsp.o(i.alert_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[29]">ble_evt_dispatch</a> from main.o(i.ble_evt_dispatch) referenced from main.o(i.ble_stack_init)
 <LI><a href="#[45]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced 4 times from bsp.o(.constdata)
 <LI><a href="#[2b]">button_timer_handler</a> from bsp.o(i.button_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[38]">conn_params_error_handler</a> from main.o(i.conn_params_error_handler) referenced from main.o(i.main)
 <LI><a href="#[27]">db_discover_evt_handler</a> from ble_hrs_c.o(i.db_discover_evt_handler) referenced from ble_hrs_c.o(i.ble_hrs_c_init)
 <LI><a href="#[28]">db_discover_evt_handler</a> from ble_rscs_c.o(i.db_discover_evt_handler) referenced from ble_rscs_c.o(i.ble_rscs_c_init)
 <LI><a href="#[24]">detection_delay_timeout_handler</a> from app_button.o(i.detection_delay_timeout_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[3b]">fds_evt_handler</a> from peer_data_storage.o(i.fds_evt_handler) referenced from peer_data_storage.o(i.pds_register)
 <LI><a href="#[0]">fs_callback</a> from fds.o(i.fs_callback) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[30]">gccm_evt_handler</a> from gatt_cache_manager.o(i.gccm_evt_handler) referenced from gatt_cache_manager.o(i.gcm_init)
 <LI><a href="#[3f]">gcm_evt_handler</a> from peer_manager.o(i.gcm_evt_handler) referenced from peer_manager.o(i.pm_init)
 <LI><a href="#[23]">gpiote_event_handler</a> from app_button.o(i.gpiote_event_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[2f]">gscm_evt_handler</a> from gatt_cache_manager.o(i.gscm_evt_handler) referenced from gatt_cache_manager.o(i.gcm_init)
 <LI><a href="#[36]">hrs_c_evt_handler</a> from main.o(i.hrs_c_evt_handler) referenced from main.o(i.main)
 <LI><a href="#[31]">im_evt_handler</a> from gatt_cache_manager.o(i.im_evt_handler) referenced from gatt_cache_manager.o(i.gcm_init)
 <LI><a href="#[40]">im_evt_handler</a> from peer_manager.o(i.im_evt_handler) referenced from peer_manager.o(i.pm_init)
 <LI><a href="#[2c]">leds_timer_handler</a> from bsp.o(i.leds_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[20]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[39]">on_adv_evt</a> from main.o(i.on_adv_evt) referenced from main.o(i.main)
 <LI><a href="#[2e]">pdb_evt_handler</a> from gattc_cache_manager.o(i.pdb_evt_handler) referenced from gattc_cache_manager.o(i.gccm_init)
 <LI><a href="#[33]">pdb_evt_handler</a> from gatts_cache_manager.o(i.pdb_evt_handler) referenced from gatts_cache_manager.o(i.gscm_init)
 <LI><a href="#[34]">pdb_evt_handler</a> from id_manager.o(i.pdb_evt_handler) referenced from id_manager.o(i.im_register)
 <LI><a href="#[3d]">pdb_evt_handler</a> from peer_manager.o(i.pdb_evt_handler) referenced from peer_manager.o(i.pm_init)
 <LI><a href="#[41]">pdb_evt_handler</a> from security_manager.o(i.pdb_evt_handler) referenced from security_manager.o(i.sm_register)
 <LI><a href="#[43]">pdb_evt_handler</a> from security_dispatcher.o(i.pdb_evt_handler) referenced from security_dispatcher.o(i.smd_register)
 <LI><a href="#[3a]">pds_evt_handler</a> from peer_database.o(i.pds_evt_handler) referenced from peer_database.o(i.pdb_register)
 <LI><a href="#[3c]">pm_evt_handler</a> from main.o(i.pm_evt_handler) referenced from main.o(i.peer_manager_init)
 <LI><a href="#[37]">rscs_c_evt_handler</a> from main.o(i.rscs_c_evt_handler) referenced from main.o(i.main)
 <LI><a href="#[3e]">sm_evt_handler</a> from peer_manager.o(i.sm_evt_handler) referenced from peer_manager.o(i.pm_init)
 <LI><a href="#[32]">smd_evt_handler</a> from gatt_cache_manager.o(i.smd_evt_handler) referenced from gatt_cache_manager.o(i.gcm_init)
 <LI><a href="#[42]">smd_evt_handler</a> from security_manager.o(i.smd_evt_handler) referenced from security_manager.o(i.sm_register)
 <LI><a href="#[44]">softdevice_fault_handler</a> from softdevice_handler.o(i.softdevice_fault_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[2a]">sys_evt_dispatch</a> from main.o(i.sys_evt_dispatch) referenced from main.o(i.ble_stack_init)
 <LI><a href="#[35]">uart_error_cb</a> from nrf_log.o(i.uart_error_cb) referenced from nrf_log.o(i.log_uart_init)
 <LI><a href="#[25]">uart_event_handler</a> from app_uart.o(i.uart_event_handler) referenced from app_uart.o(i.app_uart_init)
 <LI><a href="#[26]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[195]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[46]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[196]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[197]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[198]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[199]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[19a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[48]"></a>__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_timer.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
</UL>

<P><STRONG><a name="[19c]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_central_evt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enqueue
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrm_encode
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_central_evt
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_register
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_register
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_measurement_char_add
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body_sensor_location_char_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_register
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsc_measurement_char_add
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsc_feature_char_add
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enqueue
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[57]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_central_evt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_id_compare
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_duplicate_bonding_data
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx
</UL>

<P><STRONG><a name="[1a2]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOTE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SWI0_IRQHandler &rArr; timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SWI2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, softdevice_handler.o(i.SWI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWI2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_nrf51.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>UART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART0_IRQHandler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_parts_get
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_evt_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_evt_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_evt_handler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_update
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_execute
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process
</UL>

<P><STRONG><a name="[1a7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[56]"></a>addr_compare</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, id_manager.o(i.addr_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_duplicate_bonding_data
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[58]"></a>adv_data_encode</STRONG> (Thumb, 534 bytes, Stack size 48 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_role_encode
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[63]"></a>ah</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, id_manager.o(i.ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ah
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
</UL>

<P><STRONG><a name="[65]"></a>app_button_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_button.o(i.app_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_button_enable &rArr; nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[67]"></a>app_button_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, app_button.o(i.app_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[6c]"></a>app_error_fault_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_error.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_fault_handler
</UL>

<P><STRONG><a name="[52]"></a>app_error_handler_bare</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_start
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rscs_c_evt_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_central_evt
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrs_c_evt_handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_cb
</UL>

<P><STRONG><a name="[6b]"></a>app_timer_create</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[6d]"></a>app_timer_init</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>app_timer_start</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[74]"></a>app_timer_stop</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[75]"></a>app_uart_init</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, app_uart.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
</UL>

<P><STRONG><a name="[80]"></a>ble_advdata_set</STRONG> (Thumb, 104 bytes, Stack size 96 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[81]"></a>ble_advertising_init</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[85]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[84]"></a>ble_advertising_start</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_access_status_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_address_exists
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[89]"></a>ble_conn_params_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_params_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; conn_params_negotiation &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[8d]"></a>ble_conn_state_conn_handles</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_conn_handles))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_conn_state_conn_handles &rArr; sdk_mapped_flags_key_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>

<P><STRONG><a name="[8f]"></a>ble_conn_state_encrypted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_encrypted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_encrypted &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[91]"></a>ble_conn_state_mitm_protected</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_mitm_protected))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_mitm_protected &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[92]"></a>ble_conn_state_n_centrals</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_n_centrals))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_n_centrals &rArr; sdk_mapped_flags_n_flags_set
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_n_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_central_evt
</UL>

<P><STRONG><a name="[94]"></a>ble_conn_state_on_ble_evt</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, ble_conn_state.o(i.ble_conn_state_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_conn_state_on_ble_evt &rArr; sdk_mapped_flags_key_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[7b]"></a>ble_conn_state_role</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_role &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[98]"></a>ble_conn_state_user_flag_acquire</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_register
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>

<P><STRONG><a name="[9a]"></a>ble_conn_state_user_flag_collection</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_collection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_user_flag_collection
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>

<P><STRONG><a name="[9b]"></a>ble_conn_state_user_flag_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_connection
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_evt_handler
</UL>

<P><STRONG><a name="[7d]"></a>ble_conn_state_user_flag_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_evt_handler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_evt_handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_evt_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_evt_handler
</UL>

<P><STRONG><a name="[ac]"></a>ble_db_discovery_evt_register</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, ble_db_discovery.o(i.ble_db_discovery_evt_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_db_discovery_evt_register
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rscs_c_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_c_init
</UL>

<P><STRONG><a name="[13d]"></a>ble_db_discovery_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_db_discovery.o(i.ble_db_discovery_init))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>ble_db_discovery_on_ble_evt</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ble_db_discovery.o(i.ble_db_discovery_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_db_discovery_on_ble_evt &rArr; on_characteristic_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristics_discover
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[14d]"></a>ble_db_discovery_start</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_db_discovery.o(i.ble_db_discovery_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_db_discovery_start
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_central_evt
</UL>

<P><STRONG><a name="[a9]"></a>ble_hrs_c_hrm_notif_enable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_hrs_c.o(i.ble_hrs_c_hrm_notif_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_hrs_c_hrm_notif_enable &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrs_c_evt_handler
</UL>

<P><STRONG><a name="[ab]"></a>ble_hrs_c_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ble_hrs_c.o(i.ble_hrs_c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_hrs_c_init &rArr; ble_db_discovery_evt_register
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_evt_register
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>ble_hrs_c_on_ble_evt</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ble_hrs_c.o(i.ble_hrs_c_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hrs_c_on_ble_evt &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[ad]"></a>ble_hrs_heart_rate_measurement_send</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, ble_hrs.o(i.ble_hrs_heart_rate_measurement_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_hrs_heart_rate_measurement_send &rArr; hrm_encode &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrm_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrs_c_evt_handler
</UL>

<P><STRONG><a name="[af]"></a>ble_hrs_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_hrs.o(i.ble_hrs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ble_hrs_init &rArr; heart_rate_measurement_char_add &rArr; hrm_encode &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_measurement_char_add
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body_sensor_location_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[a4]"></a>ble_hrs_on_ble_evt</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ble_hrs.o(i.ble_hrs_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hrs_on_ble_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[b2]"></a>ble_rscs_c_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ble_rscs_c.o(i.ble_rscs_c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_rscs_c_init &rArr; ble_db_discovery_evt_register
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_evt_register
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>ble_rscs_c_on_ble_evt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_rscs_c.o(i.ble_rscs_c_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_rscs_c_on_ble_evt &rArr; on_hvx
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[b5]"></a>ble_rscs_c_rsc_notif_enable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_rscs_c.o(i.ble_rscs_c_rsc_notif_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_rscs_c_rsc_notif_enable &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rscs_c_evt_handler
</UL>

<P><STRONG><a name="[b6]"></a>ble_rscs_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_rscs.o(i.ble_rscs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ble_rscs_init &rArr; rsc_measurement_char_add &rArr; rsc_measurement_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsc_measurement_char_add
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsc_feature_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[b9]"></a>ble_rscs_measurement_send</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, ble_rscs.o(i.ble_rscs_measurement_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_rscs_measurement_send &rArr; rsc_measurement_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsc_measurement_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rscs_c_evt_handler
</UL>

<P><STRONG><a name="[a5]"></a>ble_rscs_on_ble_evt</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_rscs.o(i.ble_rscs_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_rscs_on_ble_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[c2]"></a>bsp_btn_ble_init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bsp_btn_ble.o(i.bsp_btn_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_btn_ble_init &rArr; advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>bsp_button_is_pressed</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp.o(i.bsp_button_is_pressed))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
</UL>

<P><STRONG><a name="[62]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[c4]"></a>bsp_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, bsp.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bsp_init &rArr; app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>chunk_queue_next</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fds.o(i.chunk_queue_next))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[df]"></a>fds_clear</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fds.o(i.fds_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fds_clear &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_reserve
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process_start
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_clear
</UL>

<P><STRONG><a name="[e1]"></a>fds_clear_by_instance</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fds.o(i.fds_clear_by_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_reserve
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process_start
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>

<P><STRONG><a name="[e2]"></a>fds_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fds.o(i.fds_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fds_close
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_id_within_bounds
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read_ptr_get
</UL>

<P><STRONG><a name="[16f]"></a>fds_descriptor_from_rec_id</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fds.o(i.fds_descriptor_from_rec_id))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_update
</UL>

<P><STRONG><a name="[e6]"></a>fds_find</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, fds.o(i.fds_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fds_find &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_record_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read_ptr_get
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_clear
</UL>

<P><STRONG><a name="[e8]"></a>fds_find_by_type</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fds.o(i.fds_find_by_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fds_find_by_type &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_record_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_init
</UL>

<P><STRONG><a name="[e9]"></a>fds_init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, fds.o(i.fds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = fds_init &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_reserve
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process_start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_register
</UL>

<P><STRONG><a name="[ec]"></a>fds_open</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fds.o(i.fds_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fds_open &rArr; find_record &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_id_within_bounds
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_is_valid
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_record
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read_ptr_get
</UL>

<P><STRONG><a name="[170]"></a>fds_record_id_from_desc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fds.o(i.fds_record_id_from_desc))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write_prepared
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_update
</UL>

<P><STRONG><a name="[176]"></a>fds_register</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fds.o(i.fds_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fds_register
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_register
</UL>

<P><STRONG><a name="[ef]"></a>fds_reserve</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fds.o(i.fds_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write_prepare
</UL>

<P><STRONG><a name="[f1]"></a>fds_reserve_cancel</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fds.o(i.fds_reserve_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fds_reserve_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_id_within_bounds
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write_prepare_cancel
</UL>

<P><STRONG><a name="[f2]"></a>fds_update</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, fds.o(i.fds_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fds_update &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_update
</UL>

<P><STRONG><a name="[f4]"></a>fds_write</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, fds.o(i.fds_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = fds_write &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write
</UL>

<P><STRONG><a name="[f5]"></a>fds_write_reserved</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, fds.o(i.fds_write_reserved))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write_prepared
</UL>

<P><STRONG><a name="[fa]"></a>fs_erase</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, fstorage.o(i.fs_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fs_erase &rArr; cmd_enqueue &rArr; queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_erase_swap
</UL>

<P><STRONG><a name="[ea]"></a>fs_init</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, fstorage.o(i.fs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[fc]"></a>fs_store</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, fstorage.o(i.fs_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fs_store &rArr; cmd_enqueue &rArr; queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enqueue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_chunks
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_execute
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_valid
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_copy_record
</UL>

<P><STRONG><a name="[fd]"></a>fs_sys_event_handler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, fstorage.o(i.fs_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fs_sys_event_handler &rArr; queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[105]"></a>gccm_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gattc_cache_manager.o(i.gccm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gccm_init &rArr; pdb_register &rArr; pds_register &rArr; fds_init &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_register
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
</UL>

<P><STRONG><a name="[107]"></a>gcm_ble_evt_handler</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, gatt_cache_manager.o(i.gcm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = gcm_ble_evt_handler &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_peer_was_notified_of_db_change
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ble_evt_handler
</UL>

<P><STRONG><a name="[3f]"></a>gcm_evt_handler</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, peer_manager.o(i.gcm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gcm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_manager.o(i.pm_init)
</UL>
<P><STRONG><a name="[10e]"></a>gcm_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.gcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gcm_init &rArr; smd_register &rArr; pdb_register &rArr; pds_register &rArr; fds_init &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_register
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_register
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gccm_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[112]"></a>gcm_local_database_has_changed</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, gatt_cache_manager.o(i.gcm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = gcm_local_database_has_changed &rArr; gscm_local_database_has_changed &rArr; pdb_raw_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_local_database_has_changed
</UL>

<P><STRONG><a name="[114]"></a>get_connection_by_conn_handle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, id_manager.o(i.get_connection_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>

<P><STRONG><a name="[115]"></a>get_free_connection</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, id_manager.o(i.get_free_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_free_connection &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
</UL>

<P><STRONG><a name="[10f]"></a>gscm_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gatts_cache_manager.o(i.gscm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gscm_init &rArr; pdb_register &rArr; pds_register &rArr; fds_init &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_register
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
</UL>

<P><STRONG><a name="[113]"></a>gscm_local_database_has_changed</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gatts_cache_manager.o(i.gscm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = gscm_local_database_has_changed &rArr; pdb_raw_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
</UL>

<P><STRONG><a name="[118]"></a>gscm_local_db_cache_apply</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gscm_local_db_cache_apply &rArr; pdb_read_buf_get &rArr; pds_peer_data_read_ptr_get &rArr; fds_find &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_read_buf_get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[11a]"></a>gscm_local_db_cache_update</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_clear
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>

<P><STRONG><a name="[109]"></a>gscm_peer_was_notified_of_db_change</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_peer_was_notified_of_db_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = gscm_peer_was_notified_of_db_change &rArr; pdb_raw_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[11e]"></a>gscm_service_changed_ind_needed</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gscm_service_changed_ind_needed &rArr; pdb_read_buf_get &rArr; pds_peer_data_read_ptr_get &rArr; fds_find &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_read_buf_get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_evt_handler
</UL>

<P><STRONG><a name="[187]"></a>gscm_service_changed_ind_send</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gscm_service_changed_ind_send
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
</UL>

<P><STRONG><a name="[121]"></a>im_address_resolve</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, id_manager.o(i.im_address_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = im_address_resolve &rArr; ah
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[122]"></a>im_ble_addr_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, id_manager.o(i.im_ble_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = im_ble_addr_get &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[123]"></a>im_ble_evt_handler</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, id_manager.o(i.im_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = im_ble_evt_handler &rArr; pdb_read_buf_get &rArr; pds_peer_data_read_ptr_get &rArr; fds_find &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_read_buf_get
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ble_evt_handler
</UL>

<P><STRONG><a name="[10c]"></a>im_conn_handle_get</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, id_manager.o(i.im_conn_handle_get))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_evt_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_evt_handler
</UL>

<P><STRONG><a name="[40]"></a>im_evt_handler</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, peer_manager.o(i.im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = im_evt_handler &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_manager.o(i.pm_init)
</UL>
<P><STRONG><a name="[133]"></a>im_master_id_is_valid</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, id_manager.o(i.im_master_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_id_compare
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[125]"></a>im_new_peer_id</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, id_manager.o(i.im_new_peer_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = im_new_peer_id &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>

<P><STRONG><a name="[7c]"></a>im_peer_id_get_by_conn_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, id_manager.o(i.im_peer_id_get_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_evt_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_evt_handler
</UL>

<P><STRONG><a name="[128]"></a>im_peer_id_get_by_master_id</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, id_manager.o(i.im_peer_id_get_by_master_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = im_peer_id_get_by_master_id &rArr; pdb_read_buf_get &rArr; pds_peer_data_read_ptr_get &rArr; fds_find &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_id_compare
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_read_buf_get
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[110]"></a>im_register</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, id_manager.o(i.im_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = im_register &rArr; pdb_register &rArr; pds_register &rArr; fds_init &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_register
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
</UL>

<P><STRONG><a name="[53]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>is_duplicate_bonding_data</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, id_manager.o(i.is_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = is_duplicate_bonding_data &rArr; addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_irk
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
</UL>

<P><STRONG><a name="[12b]"></a>is_valid_irk</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, id_manager.o(i.is_valid_irk))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_duplicate_bonding_data
</UL>

<P><STRONG><a name="[13b]"></a>log_uart_init</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, nrf_log.o(i.log_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = log_uart_init &rArr; app_uart_init &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>main</STRONG> (Thumb, 374 bytes, Stack size 96 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = main &rArr; peer_manager_init &rArr; pm_init &rArr; gcm_init &rArr; smd_register &rArr; pdb_register &rArr; pds_register &rArr; fds_init &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rscs_c_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_c_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[129]"></a>master_id_compare</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, id_manager.o(i.master_id_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = master_id_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
</UL>

<P><STRONG><a name="[124]"></a>new_connection</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, id_manager.o(i.new_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = new_connection &rArr; get_free_connection &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_connection
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[145]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[66]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>

<P><STRONG><a name="[6a]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[d7]"></a>nrf_drv_gpiote_in_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[69]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[68]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[77]"></a>nrf_drv_uart_init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_drv_uart_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[79]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[78]"></a>nrf_drv_uart_rx_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_uart_rx_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[11d]"></a>pdb_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peer_database.o(i.pdb_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pdb_clear &rArr; pds_peer_data_clear &rArr; fds_clear &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
</UL>

<P><STRONG><a name="[3d]"></a>pdb_evt_handler</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, peer_manager.o(i.pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pdb_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_manager.o(i.pm_init)
</UL>
<P><STRONG><a name="[116]"></a>pdb_next_peer_id_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peer_database.o(i.pdb_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_ids_init &rArr; peer_id_allocate &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete_all
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
</UL>

<P><STRONG><a name="[135]"></a>pdb_peer_allocate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peer_database.o(i.pdb_peer_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pdb_peer_allocate &rArr; pds_peer_id_allocate &rArr; peer_ids_init &rArr; peer_id_allocate &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
</UL>

<P><STRONG><a name="[127]"></a>pdb_peer_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peer_database.o(i.pdb_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete_all
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_evt_handler
</UL>

<P><STRONG><a name="[117]"></a>pdb_raw_store</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, peer_database.o(i.pdb_raw_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pdb_raw_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_or_update
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_peer_was_notified_of_db_change
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
</UL>

<P><STRONG><a name="[119]"></a>pdb_read_buf_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peer_database.o(i.pdb_read_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pdb_read_buf_get &rArr; pds_peer_data_read_ptr_get &rArr; fds_find &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read_ptr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[106]"></a>pdb_register</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, peer_database.o(i.pdb_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pdb_register &rArr; pds_register &rArr; fds_init &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_register
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_register
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_register
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gccm_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_register
</UL>

<P><STRONG><a name="[11b]"></a>pdb_write_buf_get</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, peer_database.o(i.pdb_write_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pdb_write_buf_get &rArr; pds_peer_id_is_allocated &rArr; peer_ids_init &rArr; peer_id_allocate &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[11c]"></a>pdb_write_buf_release</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, peer_database.o(i.pdb_write_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pdb_write_buf_release &rArr; write_buffer_record_release &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write_prepare_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[7e]"></a>pdb_write_buf_store</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, peer_database.o(i.pdb_write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pdb_write_buf_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_or_update
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_REMOTE_DB_N_WORDS
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_handler
</UL>

<P><STRONG><a name="[134]"></a>pdb_write_buf_store_prepare</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, peer_database.o(i.pdb_write_buf_store_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pdb_write_buf_store_prepare &rArr; pds_peer_data_write_prepare &rArr; fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[154]"></a>pds_next_peer_id_get</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pds_next_peer_id_get &rArr; peer_ids_init &rArr; peer_id_allocate &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>

<P><STRONG><a name="[153]"></a>pds_peer_data_clear</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, peer_data_storage.o(i.pds_peer_data_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pds_peer_data_clear &rArr; fds_clear &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PEER_DATA_ID_IS_VALID
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_find
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_clear
</UL>

<P><STRONG><a name="[158]"></a>pds_peer_data_read_ptr_get</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, peer_data_storage.o(i.pds_peer_data_read_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pds_peer_data_read_ptr_get &rArr; fds_find &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PEER_DATA_ID_IS_VALID
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_open
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_find
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_close
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_read_buf_get
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_or_update
</UL>

<P><STRONG><a name="[16b]"></a>pds_peer_data_update</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, peer_data_storage.o(i.pds_peer_data_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pds_peer_data_update &rArr; fds_update &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_peer_id_to_instance_id
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_peer_data_id_to_type_id
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PEER_DATA_ID_IS_VALID
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_parts_get
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_update
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_id_from_desc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_descriptor_from_rec_id
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_or_update
</UL>

<P><STRONG><a name="[171]"></a>pds_peer_data_write</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, peer_data_storage.o(i.pds_peer_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pds_peer_data_write &rArr; fds_write &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_peer_id_to_instance_id
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_peer_data_id_to_type_id
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PEER_DATA_ID_IS_VALID
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_parts_get
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_write
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_id_from_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_or_update
</UL>

<P><STRONG><a name="[166]"></a>pds_peer_data_write_prepare</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_peer_data_write_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pds_peer_data_write_prepare &rArr; fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PEER_DATA_ID_IS_VALID
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[162]"></a>pds_peer_data_write_prepare_cancel</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_data_write_prepare_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pds_peer_data_write_prepare_cancel &rArr; fds_reserve_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_or_update
</UL>

<P><STRONG><a name="[172]"></a>pds_peer_data_write_prepared</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, peer_data_storage.o(i.pds_peer_data_write_prepared))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_peer_id_to_instance_id
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_peer_data_id_to_type_id
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PEER_DATA_ID_IS_VALID
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_parts_get
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_write_reserved
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_id_from_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_or_update
</UL>

<P><STRONG><a name="[155]"></a>pds_peer_id_allocate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pds_peer_id_allocate &rArr; peer_ids_init &rArr; peer_id_allocate &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
</UL>

<P><STRONG><a name="[156]"></a>pds_peer_id_free</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_clear_by_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>

<P><STRONG><a name="[15c]"></a>pds_peer_id_is_allocated</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_is_allocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pds_peer_id_is_allocated &rArr; peer_ids_init &rArr; peer_id_allocate &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[15a]"></a>pds_register</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pds_register &rArr; fds_init &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_register
</UL>

<P><STRONG><a name="[16e]"></a>peer_data_parts_get</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, peer_data.o(i.peer_data_parts_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = peer_data_parts_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write_prepared
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_update
</UL>

<P><STRONG><a name="[173]"></a>peer_id_allocate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, peer_id.o(i.peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = peer_id_allocate &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
</UL>

<P><STRONG><a name="[e5]"></a>peer_id_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = peer_id_free &rArr; pm_mutex_unlock &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[175]"></a>peer_id_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_init &rArr; pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_register
</UL>

<P><STRONG><a name="[174]"></a>peer_id_is_allocated</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_is_allocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = peer_id_is_allocated
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>

<P><STRONG><a name="[169]"></a>peer_id_next_id_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, peer_id.o(i.peer_id_next_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>

<P><STRONG><a name="[a3]"></a>pm_ble_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, peer_manager.o(i.pm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = pm_ble_evt_handler &rArr; gcm_ble_evt_handler &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[15f]"></a>pm_buffer_block_acquire</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, pm_buffer.o(i.pm_buffer_block_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pm_buffer_block_acquire &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[15b]"></a>pm_buffer_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, pm_buffer.o(i.pm_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pm_buffer_init &rArr; pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_register
</UL>

<P><STRONG><a name="[160]"></a>pm_buffer_ptr_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_buffer_ptr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[15e]"></a>pm_buffer_release</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
</UL>

<P><STRONG><a name="[17c]"></a>pm_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, peer_manager.o(i.pm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pm_init &rArr; gcm_init &rArr; smd_register &rArr; pdb_register &rArr; pds_register &rArr; fds_init &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_register
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_register
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_register
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[120]"></a>pm_link_secure</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peer_manager.o(i.pm_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = pm_link_secure &rArr; sm_link_secure &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rscs_c_evt_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrs_c_evt_handler
</UL>

<P><STRONG><a name="[181]"></a>pm_local_database_has_changed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, peer_manager.o(i.pm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; gscm_local_database_has_changed &rArr; pdb_raw_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[17a]"></a>pm_mutex_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pm_mutex.o(i.pm_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
</UL>

<P><STRONG><a name="[178]"></a>pm_mutex_lock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pm_mutex.o(i.pm_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pm_mutex_lock &rArr; lock_by_mask &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>

<P><STRONG><a name="[177]"></a>pm_mutex_lock_first_available</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pm_mutex.o(i.pm_mutex_lock_first_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>

<P><STRONG><a name="[17b]"></a>pm_mutex_lock_status_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pm_mutex.o(i.pm_mutex_lock_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_next_id_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>

<P><STRONG><a name="[179]"></a>pm_mutex_unlock</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pm_mutex.o(i.pm_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pm_mutex_unlock &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_int_priority_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
</UL>

<P><STRONG><a name="[17d]"></a>pm_peer_delete_all</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, peer_manager.o(i.pm_peer_delete_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pm_peer_delete_all &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[17f]"></a>pm_register</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, peer_manager.o(i.pm_register))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[17e]"></a>pm_sec_params_set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peer_manager.o(i.pm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pm_sec_params_set &rArr; sm_sec_params_set &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[86]"></a>pstorage_access_status_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_access_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[be]"></a>sd_check_ram_start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, softdevice_handler.o(i.sd_check_ram_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_check_ram_start
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[95]"></a>sdk_mapped_flags_bulk_update_by_key</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_bulk_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
</UL>

<P><STRONG><a name="[96]"></a>sdk_mapped_flags_first_key_index_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_first_key_index_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_first_key_index_get
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[90]"></a>sdk_mapped_flags_get_by_key</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
</UL>

<P><STRONG><a name="[8e]"></a>sdk_mapped_flags_key_list_get</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_key_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sdk_mapped_flags_key_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>

<P><STRONG><a name="[93]"></a>sdk_mapped_flags_n_flags_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_n_flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_n_flags_set
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_n_centrals
</UL>

<P><STRONG><a name="[97]"></a>sdk_mapped_flags_update_by_key</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>

<P><STRONG><a name="[180]"></a>sm_ble_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, security_manager.o(i.sm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = sm_ble_evt_handler &rArr; smd_ble_evt_handler &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ble_evt_handler
</UL>

<P><STRONG><a name="[3e]"></a>sm_evt_handler</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, peer_manager.o(i.sm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sm_evt_handler &rArr; im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_manager.o(i.pm_init)
</UL>
<P><STRONG><a name="[183]"></a>sm_link_secure</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, security_manager.o(i.sm_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = sm_link_secure &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_link_secure
</UL>

<P><STRONG><a name="[182]"></a>sm_register</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, security_manager.o(i.sm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sm_register &rArr; smd_register &rArr; pdb_register &rArr; pds_register &rArr; fds_init &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_register
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_register
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[184]"></a>sm_sec_params_set</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, security_manager.o(i.sm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sm_sec_params_set &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_verify
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
</UL>

<P><STRONG><a name="[188]"></a>smd_ble_evt_handler</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, security_dispatcher.o(i.smd_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = smd_ble_evt_handler &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[12d]"></a>smd_link_secure</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, security_dispatcher.o(i.smd_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[18a]"></a>smd_params_reply</STRONG> (Thumb, 274 bytes, Stack size 80 bytes, security_dispatcher.o(i.smd_params_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = smd_params_reply &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>

<P><STRONG><a name="[111]"></a>smd_register</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, security_dispatcher.o(i.smd_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = smd_register &rArr; pdb_register &rArr; pds_register &rArr; fds_init &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_register
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_register
</UL>

<P><STRONG><a name="[c0]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[bf]"></a>softdevice_enable</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[bd]"></a>softdevice_enable_get_default_config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable_get_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_enable_get_default_config
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[44]"></a>softdevice_fault_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_fault_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[bc]"></a>softdevice_handler_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_handler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[c1]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[35]"></a>uart_error_cb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_log.o(i.uart_error_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_error_cb &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log.o(i.log_uart_init)
</UL>
<P><STRONG><a name="[25]"></a>uart_event_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, app_uart.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(i.app_uart_init)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14e]"></a>adv_report_parse</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i.adv_report_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adv_report_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_central_evt
</UL>

<P><STRONG><a name="[29]"></a>ble_evt_dispatch</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, main.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ble_evt_dispatch &rArr; pm_ble_evt_handler &rArr; gcm_ble_evt_handler &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ble_evt_handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rscs_on_ble_evt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rscs_c_on_ble_evt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_on_ble_evt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_c_on_ble_evt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_central_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[bb]"></a>ble_stack_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, main.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_stack_init &rArr; softdevice_handler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_check_ram_start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>conn_params_error_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[36]"></a>hrs_c_evt_handler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.hrs_c_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = hrs_c_evt_handler &rArr; pm_link_secure &rArr; sm_link_secure &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_link_secure
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_heart_rate_measurement_send
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_c_hrm_notif_enable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[39]"></a>on_adv_evt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = on_adv_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[a6]"></a>on_ble_central_evt</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, main.o(i.on_ble_central_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_ble_central_evt &rArr; ble_conn_state_n_centrals &rArr; sdk_mapped_flags_n_flags_set
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_start
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_n_centrals
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_start
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_report_parse
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[13c]"></a>peer_manager_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main.o(i.peer_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = peer_manager_init &rArr; pm_init &rArr; gcm_init &rArr; smd_register &rArr; pdb_register &rArr; pds_register &rArr; fds_init &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_register
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete_all
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>pm_evt_handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.pm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pm_evt_handler &rArr; pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; gscm_local_database_has_changed &rArr; pdb_raw_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_local_database_has_changed
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_link_secure
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.peer_manager_init)
</UL>
<P><STRONG><a name="[37]"></a>rscs_c_evt_handler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, main.o(i.rscs_c_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = rscs_c_evt_handler &rArr; pm_link_secure &rArr; sm_link_secure &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_link_secure
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rscs_measurement_send
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rscs_c_rsc_notif_enable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[13f]"></a>scan_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.scan_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scan_start &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_central_evt
</UL>

<P><STRONG><a name="[13e]"></a>services_init</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, main.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = services_init &rArr; ble_hrs_init &rArr; heart_rate_measurement_char_add &rArr; hrm_encode &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rscs_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>sys_evt_dispatch</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sys_evt_dispatch &rArr; ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[2d]"></a>alert_timer_handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp.o(i.alert_timer_handler))
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[45]"></a>bsp_button_event_handler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>bsp_led_indication</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_led_indication &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_timer_handler
</UL>

<P><STRONG><a name="[2b]"></a>button_timer_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.button_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = button_timer_handler &rArr; bsp_button_event_handler &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[2c]"></a>leds_timer_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp.o(i.leds_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = leds_timer_handler &rArr; bsp_led_indication &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[61]"></a>advertising_buttons_configure</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.advertising_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
</UL>

<P><STRONG><a name="[54]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_nrf51.o(i.is_manual_peripheral_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5a]"></a>ble_device_addr_encode</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_device_addr_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[5d]"></a>conn_int_encode</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[59]"></a>le_role_encode</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, ble_advdata.o(i.le_role_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = le_role_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[5e]"></a>manuf_specific_data_encode</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[60]"></a>name_encode</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[5f]"></a>service_data_encode</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = service_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[5b]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[5c]"></a>uuid_list_encode</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[193]"></a>uuid_list_sized_encode</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[82]"></a>ble_advertising_peer_address_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_peer_address_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_advertising_peer_address_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[87]"></a>peer_address_exists</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_advertising.o(i.peer_address_exists))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[88]"></a>whitelist_has_entries</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[8c]"></a>conn_params_negotiation</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[d4]"></a>is_conn_params_ok</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[26]"></a>update_timeout_handler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[99]"></a>user_flag_is_acquired</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_conn_state.o(i.user_flag_is_acquired))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>

<P><STRONG><a name="[a0]"></a>characteristics_discover</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ble_db_discovery.o(i.characteristics_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = characteristics_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[d5]"></a>descriptors_discover</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, ble_db_discovery.o(i.descriptors_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = descriptors_discover &rArr; is_desc_discovery_reqd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_desc_discovery_reqd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[9e]"></a>discovery_complete_evt_trigger</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ble_db_discovery.o(i.discovery_complete_evt_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = discovery_complete_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_user_evts_send
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[a1]"></a>discovery_error_evt_trigger</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_db_discovery.o(i.discovery_error_evt_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = discovery_error_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pending_user_evts_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[d6]"></a>is_desc_discovery_reqd</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, ble_db_discovery.o(i.is_desc_discovery_reqd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_desc_discovery_reqd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptors_discover
</UL>

<P><STRONG><a name="[a2]"></a>on_characteristic_discovery_rsp</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, ble_db_discovery.o(i.on_characteristic_discovery_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_characteristic_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptors_discover
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristics_discover
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[9d]"></a>on_descriptor_discovery_rsp</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ble_db_discovery.o(i.on_descriptor_discovery_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_descriptor_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptors_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[9f]"></a>on_srv_disc_completion</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ble_db_discovery.o(i.on_srv_disc_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = on_srv_disc_completion &rArr; discovery_error_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[dc]"></a>pending_user_evts_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ble_db_discovery.o(i.pending_user_evts_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pending_user_evts_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
</UL>

<P><STRONG><a name="[db]"></a>registered_handler_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_db_discovery.o(i.registered_handler_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = registered_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
</UL>

<P><STRONG><a name="[30]"></a>gccm_evt_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.gccm_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.gcm_init)
</UL>
<P><STRONG><a name="[2f]"></a>gscm_evt_handler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.gscm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = gscm_evt_handler &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_read_buf_get &rArr; pds_peer_data_read_ptr_get &rArr; fds_find &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.gcm_init)
</UL>
<P><STRONG><a name="[31]"></a>im_evt_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = im_evt_handler &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_read_buf_get &rArr; pds_peer_data_read_ptr_get &rArr; fds_find &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.gcm_init)
</UL>
<P><STRONG><a name="[108]"></a>local_db_apply_in_evt</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.local_db_apply_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_read_buf_get &rArr; pds_peer_data_read_ptr_get &rArr; fds_find &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_evt_handler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_evt_handler
</UL>

<P><STRONG><a name="[10a]"></a>local_db_update_in_evt</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.local_db_update_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_evt_handler
</UL>

<P><STRONG><a name="[10b]"></a>service_changed_pending_flags_check</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, gatt_cache_manager.o(i.service_changed_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = service_changed_pending_flags_check &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_read_buf_get &rArr; pds_peer_data_read_ptr_get &rArr; fds_find &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[32]"></a>smd_evt_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = smd_evt_handler &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.gcm_init)
</UL>
<P><STRONG><a name="[2e]"></a>pdb_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gattc_cache_manager.o(i.pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pdb_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_cache_manager.o(i.gccm_init)
</UL>
<P><STRONG><a name="[33]"></a>pdb_evt_handler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gatts_cache_manager.o(i.pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pdb_evt_handler &rArr; pdb_read_buf_get &rArr; pds_peer_data_read_ptr_get &rArr; fds_find &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_read_buf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatts_cache_manager.o(i.gscm_init)
</UL>
<P><STRONG><a name="[126]"></a>evt_send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, id_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
</UL>

<P><STRONG><a name="[34]"></a>pdb_evt_handler</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, id_manager.o(i.pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pdb_evt_handler &rArr; pdb_read_buf_get &rArr; pds_peer_data_read_ptr_get &rArr; fds_find &rArr; find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_duplicate_bonding_data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_read_buf_get
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(i.im_register)
</UL>
<P><STRONG><a name="[16a]"></a>PM_PEER_DATA_ID_IS_VALID</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peer_data_storage.o(i.PM_PEER_DATA_ID_IS_VALID))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write_prepared
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write_prepare
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_update
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read_ptr_get
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_clear
</UL>

<P><STRONG><a name="[16c]"></a>convert_peer_data_id_to_type_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.convert_peer_data_id_to_type_id))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write_prepared
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_update
</UL>

<P><STRONG><a name="[16d]"></a>convert_peer_id_to_instance_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.convert_peer_id_to_instance_id))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write_prepared
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_update
</UL>

<P><STRONG><a name="[e4]"></a>convert_type_id_to_peer_data_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.convert_type_id_to_peer_data_id))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[3b]"></a>fds_evt_handler</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, peer_data_storage.o(i.fds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fds_evt_handler &rArr; peer_id_free &rArr; pm_mutex_unlock &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_type_id_to_peer_data_id
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(i.pds_register)
</UL>
<P><STRONG><a name="[168]"></a>peer_ids_init</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, peer_data_storage.o(i.peer_ids_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = peer_ids_init &rArr; peer_id_allocate &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_open
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_find_by_type
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_close
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>

<P><STRONG><a name="[165]"></a>PM_REMOTE_DB_N_WORDS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, peer_database.o(i.PM_REMOTE_DB_N_WORDS))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
</UL>

<P><STRONG><a name="[167]"></a>pdb_evt_send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, peer_database.o(i.pdb_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdb_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_handler
</UL>

<P><STRONG><a name="[3a]"></a>pds_evt_handler</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, peer_database.o(i.pds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = pds_evt_handler &rArr; pdb_write_buf_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(i.pdb_register)
</UL>
<P><STRONG><a name="[164]"></a>peer_data_const_point_to_buffer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, peer_database.o(i.peer_data_const_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = peer_data_const_point_to_buffer &rArr; peer_data_point_to_buffer &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[161]"></a>peer_data_point_to_buffer</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, peer_database.o(i.peer_data_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = peer_data_point_to_buffer &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_REMOTE_DB_N_WORDS
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
</UL>

<P><STRONG><a name="[15d]"></a>write_buffer_record_find</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, peer_database.o(i.write_buffer_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = write_buffer_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_handler
</UL>

<P><STRONG><a name="[159]"></a>write_buffer_record_invalidate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, peer_database.o(i.write_buffer_record_invalidate))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_register
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
</UL>

<P><STRONG><a name="[163]"></a>write_buffer_record_release</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_buffer_record_release &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_handler
</UL>

<P><STRONG><a name="[157]"></a>write_or_update</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, peer_database.o(i.write_or_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write_prepared
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write_prepare_cancel
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_update
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read_ptr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
</UL>

<P><STRONG><a name="[10d]"></a>evt_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, peer_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_evt_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_evt_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_evt_handler
</UL>

<P><STRONG><a name="[13a]"></a>current_int_priority_get</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pm_mutex.o(i.current_int_priority_get))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
</UL>

<P><STRONG><a name="[139]"></a>lock_by_mask</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, pm_mutex.o(i.lock_by_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lock_by_mask &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_int_priority_get
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
</UL>

<P><STRONG><a name="[7a]"></a>auth_status_success_process</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, security_dispatcher.o(i.auth_status_success_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_or_update &rArr; pds_peer_data_write_prepared &rArr; fds_write_reserved &rArr; write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[d8]"></a>disconnect_process</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, security_dispatcher.o(i.disconnect_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = disconnect_process &rArr; pairing_failure &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[da]"></a>encryption_failure</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, security_dispatcher.o(i.encryption_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = encryption_failure &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
</UL>

<P><STRONG><a name="[7f]"></a>evt_send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, security_dispatcher.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[f7]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_dispatcher.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_register
</UL>

<P><STRONG><a name="[12e]"></a>link_secure_central</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, security_dispatcher.o(i.link_secure_central))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>

<P><STRONG><a name="[12f]"></a>link_secure_central_existing_peer</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, security_dispatcher.o(i.link_secure_central_existing_peer))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = link_secure_central_existing_peer &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_read_buf_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[130]"></a>link_secure_central_new_peer</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, security_dispatcher.o(i.link_secure_central_new_peer))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = link_secure_central_new_peer &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[d9]"></a>pairing_failure</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, security_dispatcher.o(i.pairing_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pairing_failure &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
</UL>

<P><STRONG><a name="[43]"></a>pdb_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, security_dispatcher.o(i.pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pdb_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_dispatcher.o(i.smd_register)
</UL>
<P><STRONG><a name="[186]"></a>sec_info_request_process</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, security_dispatcher.o(i.sec_info_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sec_info_request_process &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_read_buf_get
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[131]"></a>sec_proc_start</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, security_dispatcher.o(i.sec_proc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[132]"></a>sec_start_send</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, security_dispatcher.o(i.sec_start_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sec_start_send &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[dd]"></a>events_send_from_err_code</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, security_manager.o(i.events_send_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = events_send_from_err_code &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[de]"></a>evt_send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, security_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_evt_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
</UL>

<P><STRONG><a name="[f8]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_manager.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_register
</UL>

<P><STRONG><a name="[f9]"></a>flags_set_from_err_code</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, security_manager.o(i.flags_set_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flags_set_from_err_code &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[12c]"></a>link_secure</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, security_manager.o(i.link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_evt_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_link_secure
</UL>

<P><STRONG><a name="[136]"></a>link_secure_pending_process</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, security_manager.o(i.link_secure_pending_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[151]"></a>params_reply_pending_process</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, security_manager.o(i.params_reply_pending_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = params_reply_pending_process &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_handler
</UL>

<P><STRONG><a name="[41]"></a>pdb_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, security_manager.o(i.pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = pdb_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_manager.o(i.sm_register)
</UL>
<P><STRONG><a name="[189]"></a>sec_params_verify</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, security_manager.o(i.sec_params_verify))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>

<P><STRONG><a name="[42]"></a>smd_evt_handler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, security_manager.o(i.smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = smd_evt_handler &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_manager.o(i.sm_register)
</UL>
<P><STRONG><a name="[152]"></a>smd_params_reply_perform</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, security_manager.o(i.smd_params_reply_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_start &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; fds_clear_by_instance &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_evt_handler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
</UL>

<P><STRONG><a name="[b1]"></a>body_sensor_location_char_add</STRONG> (Thumb, 130 bytes, Stack size 80 bytes, ble_hrs.o(i.body_sensor_location_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = body_sensor_location_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_init
</UL>

<P><STRONG><a name="[b0]"></a>heart_rate_measurement_char_add</STRONG> (Thumb, 172 bytes, Stack size 104 bytes, ble_hrs.o(i.heart_rate_measurement_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = heart_rate_measurement_char_add &rArr; hrm_encode &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrm_encode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_init
</UL>

<P><STRONG><a name="[ae]"></a>hrm_encode</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ble_hrs.o(i.hrm_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hrm_encode &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_heart_rate_measurement_send
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_measurement_char_add
</UL>

<P><STRONG><a name="[27]"></a>db_discover_evt_handler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_hrs_c.o(i.db_discover_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = db_discover_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_hrs_c.o(i.ble_hrs_c_init)
</UL>
<P><STRONG><a name="[aa]"></a>tx_buffer_process</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ble_hrs_c.o(i.tx_buffer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_c_on_ble_evt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_c_hrm_notif_enable
</UL>

<P><STRONG><a name="[b8]"></a>rsc_feature_char_add</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, ble_rscs.o(i.rsc_feature_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rsc_feature_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rscs_init
</UL>

<P><STRONG><a name="[b7]"></a>rsc_measurement_char_add</STRONG> (Thumb, 170 bytes, Stack size 104 bytes, ble_rscs.o(i.rsc_measurement_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = rsc_measurement_char_add &rArr; rsc_measurement_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsc_measurement_encode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rscs_init
</UL>

<P><STRONG><a name="[ba]"></a>rsc_measurement_encode</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, ble_rscs.o(i.rsc_measurement_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rsc_measurement_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rscs_measurement_send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsc_measurement_char_add
</UL>

<P><STRONG><a name="[28]"></a>db_discover_evt_handler</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ble_rscs_c.o(i.db_discover_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = db_discover_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_rscs_c.o(i.ble_rscs_c_init)
</UL>
<P><STRONG><a name="[b3]"></a>on_hvx</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ble_rscs_c.o(i.on_hvx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_hvx
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rscs_c_on_ble_evt
</UL>

<P><STRONG><a name="[b4]"></a>tx_buffer_process</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ble_rscs_c.o(i.tx_buffer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rscs_c_rsc_notif_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rscs_c_on_ble_evt
</UL>

<P><STRONG><a name="[144]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[142]"></a>channel_port_alloc</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[4e]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>nrf_gpio_cfg</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[4f]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>pin_in_use_by_port</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[141]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[148]"></a>nrf_drv_uart_rx_for_uart</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_for_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_drv_uart_rx_for_uart &rArr; rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[14c]"></a>nrf_gpio_cfg</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[147]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[146]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[14a]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[18f]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[14b]"></a>rx_byte</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rx_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[190]"></a>rx_done_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[149]"></a>rx_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.rx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[191]"></a>tx_byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[192]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[55]"></a>uart_irq_handler</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[24]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_button.o(i.detection_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = detection_delay_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[23]"></a>gpiote_event_handler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, app_button.o(i.gpiote_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpiote_event_handler &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[6f]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[d3]"></a>compare_reg_update</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[18d]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[18e]"></a>list_deletions_handler</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = list_deletions_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[137]"></a>list_insertions_handler</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[6e]"></a>rtc1_stop</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[51]"></a>timer_list_handler</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[138]"></a>timer_list_insert</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[50]"></a>timer_timeouts_check</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_timeouts_check &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[71]"></a>user_id_get</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, app_timer.o(i.user_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[72]"></a>user_op_alloc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[ce]"></a>app_notify</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fds.o(i.app_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process
</UL>

<P><STRONG><a name="[ca]"></a>cmd_queue_process</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, fds.o(i.cmd_queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_execute
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_callback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process_start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process
</UL>

<P><STRONG><a name="[d0]"></a>cmd_queue_process_start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fds.o(i.cmd_queue_process_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_clear_by_instance
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_clear
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[f6]"></a>find_next_valid</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fds.o(i.find_next_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_copy_record
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_record_by_key
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_record
</UL>

<P><STRONG><a name="[ed]"></a>find_record</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fds.o(i.find_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = find_record &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_id_within_bounds
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_open
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_execute
</UL>

<P><STRONG><a name="[e7]"></a>find_record_by_key</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, fds.o(i.find_record_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = find_record_by_key &rArr; find_next_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_find_by_type
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_find
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_execute
</UL>

<P><STRONG><a name="[cf]"></a>flag_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fds.o(i.flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process
</UL>

<P><STRONG><a name="[d1]"></a>flag_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.flag_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_clear_by_instance
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_clear
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_record_by_key
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process_start
</UL>

<P><STRONG><a name="[d2]"></a>flag_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fds.o(i.flag_set))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process_start
</UL>

<P><STRONG><a name="[0]"></a>fs_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fds.o(i.fs_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fs_callback &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[100]"></a>gc_copy_record</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fds.o(i.gc_copy_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gc_copy_record &rArr; gc_swap &rArr; gc_erase_swap &rArr; fs_erase &rArr; cmd_enqueue &rArr; queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_valid
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[102]"></a>gc_erase_swap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fds.o(i.gc_erase_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gc_erase_swap &rArr; fs_erase &rArr; cmd_enqueue &rArr; queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[cd]"></a>gc_execute</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gc_execute &rArr; gc_copy_record &rArr; gc_swap &rArr; gc_erase_swap &rArr; fs_erase &rArr; cmd_enqueue &rArr; queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_valid
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_erase_swap
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_copy_record
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process
</UL>

<P><STRONG><a name="[101]"></a>gc_swap</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fds.o(i.gc_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gc_swap &rArr; gc_erase_swap &rArr; fs_erase &rArr; cmd_enqueue &rArr; queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_erase_swap
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_copy_record
</UL>

<P><STRONG><a name="[ee]"></a>header_is_valid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.header_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_open
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_valid
</UL>

<P><STRONG><a name="[cb]"></a>init_execute</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = init_execute &rArr; page_tag_write_valid &rArr; fs_store &rArr; cmd_enqueue &rArr; queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_valid
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process
</UL>

<P><STRONG><a name="[e3]"></a>page_id_within_bounds</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.page_id_within_bounds))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_close
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_record
</UL>

<P><STRONG><a name="[150]"></a>page_scan</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, fds.o(i.page_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[104]"></a>page_tag_write_swap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = page_tag_write_swap &rArr; fs_store &rArr; cmd_enqueue &rArr; queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[103]"></a>page_tag_write_valid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = page_tag_write_valid &rArr; fs_store &rArr; cmd_enqueue &rArr; queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[eb]"></a>pages_init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, fds.o(i.pages_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pages_init &rArr; page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[e0]"></a>queue_reserve</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, fds.o(i.queue_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = queue_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_clear_by_instance
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_clear
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[cc]"></a>store_execute</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, fds.o(i.store_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = store_execute &rArr; write_chunks &rArr; fs_store &rArr; cmd_enqueue &rArr; queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_chunks
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_page_offsets
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_record_by_key
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_record
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process
</UL>

<P><STRONG><a name="[18b]"></a>update_page_offsets</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.update_page_offsets))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_execute
</UL>

<P><STRONG><a name="[18c]"></a>write_chunks</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fds.o(i.write_chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_chunks &rArr; fs_store &rArr; cmd_enqueue &rArr; queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_execute
</UL>

<P><STRONG><a name="[f3]"></a>write_enqueue</STRONG> (Thumb, 278 bytes, Stack size 72 bytes, fds.o(i.write_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = write_enqueue &rArr; cmd_queue_process_start &rArr; cmd_queue_process &rArr;  cmd_queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_reserve
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_process_start
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_queue_next
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_write_reserved
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_write
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_update
</UL>

<P><STRONG><a name="[f0]"></a>write_space_reserve</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, fds.o(i.write_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = write_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[fe]"></a>app_notify</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fstorage.o(i.app_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[fb]"></a>check_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fstorage.o(i.check_config))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[c8]"></a>cmd_enqueue</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fstorage.o(i.cmd_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmd_enqueue &rArr; queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[ff]"></a>queue_advance</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fstorage.o(i.queue_advance))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
</UL>

<P><STRONG><a name="[c9]"></a>queue_process</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, fstorage.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = queue_process &rArr; app_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enqueue
</UL>

<P><STRONG><a name="[185]"></a>sdk_mapped_flags_get_by_index</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_n_flags_set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
